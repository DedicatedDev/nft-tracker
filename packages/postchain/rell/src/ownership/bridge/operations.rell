operation add_contract(chain: text, address: byte_array, type: text) {
    _add_contract(chain, address, type);
}

operation transfer_ownership(chain: name, contract: byte_array, nft_id: integer, owner_id: byte_array, block_number: integer) {
    _transfer_ownership(chain, contract, nft_id, owner_id, block_number);
}

operation transfer_batch_complex_ownership( 
    tokens: list<(chain:text,
    contract_address: byte_array,
    type: text,
    token_id: integer,
    owner_id: byte_array,
    block_number: integer)>
) {
    for (token in tokens) {
        _transfer_ownership(
            token.chain,
            token.contract_address,
            token.token_id,
            token.owner_id,
            token.block_number
        );
        _update_contract_sync_status(
            token.chain,
            token.contract_address,
            token.type, 
            token.block_number
        );
    }
}

operation transfer_batch_ownership(
    chain:text, 
    contract_address: byte_array, 
    type: text,
    tokens: list<(token_id: integer, owner_id: byte_array, block_number: integer)>
) {
    /*
    Update ownership of multiple NFTs in a single transaction.
    */
    var max_block_number: integer = 0;
    for (token in tokens) {
        _transfer_ownership(
            chain,
            contract_address,
            token.token_id,
            token.owner_id,
            token.block_number
        );
        if(token.block_number > max_block_number) {
            max_block_number = token.block_number;
        }
    }
    _update_contract_sync_status(chain,contract_address,type, max_block_number);
}

operation  update_contract_sync_status(
    chain:text,
    contract_address: pubkey,
    type: text, 
    block_number:integer
) {
    _update_contract_sync_status(chain,contract_address,type,block_number);
}

operation update_batch_sync_status(
    sync_infos: list<(
        chain:text,
        contract_address: pubkey,
        type: text, 
        block_number:integer
    )>
) {
    for(sync_info in sync_infos) {
        _update_contract_sync_status(
            sync_info.chain,
            sync_info.contract_address,
            sync_info.type,
            sync_info.block_number
        );
    }
}

// operation update_contract_sync_status(  
//    contracts: list<(chain:text, contract_address: byte_array, type:text)>
// ) {
//     for (contract in contracts ) {
//         _update_contract_sync_status(contract.chain, contract.contract_address, contract.type);
//     }
// }

// operation update_chain_sync_status(chain:text, last_sync_block_number: integer) {
//     _update_chain_sync_status(chain, last_sync_block_number);
// }
