@test module;

import ^^^.tests.helper.*;
import ^^.extensions;

namespace ownership {
    import ^^^.ownership.bridge;
}

val test_contract = x"29d8E29f41F82203b566047b5Ca4CD828F19E8E6";

function test_add_contract()  {
    val admin = admin_keypair();
    
    ownership.bridge.add_contract("eth_main", test_contract, "ERC1155")
        .sign(admin)
        .run();
    
    val contracts = ownership.bridge.contract @* { 
        .chain == "eth_main",
        .address == test_contract,
        .type == "ERC1155"
    };
    
    assert_true(contracts.size() == 1);
}

function test_transfer_ownership()  {
    val admin = admin_keypair();
    
    ownership.bridge.transfer_ownership("eth_main", test_contract, 1, rell.test.keypairs.bob.pub)
        .sign(admin)
        .run();
}

function test_query_nft_history() {
    create_ownership(
        "eth_main",
        test_contract,
        1,
        rell.test.keypairs.alice.pub
    );
    
    val result = ownership.bridge.get_nft_history(
        "eth_main", 
        test_contract, 
        1, 
        first_page_cursor(150)
    );
    
    assert_true(result.data.size() == 1);
}

//fetch nfts by contract address
function test_query_nfts_by_token() {
    create_ownership(
        "eth_main",
        test_contract,
        1,
        rell.test.keypairs.alice.pub
    );

    val result = ownership.bridge.get_nfts_by_token(
        "eth_main", 
        test_contract, 
        first_page_cursor(150)
    );
    
    assert_equals(result.data, [
        (
          chain = "eth_main",
          contract = test_contract,
          id = 1
        ).to_gtv()
    ]);
}

//fetch nfts by owner 
function test_query_nfts_by_owner() {
    create_ownership(
        "eth_main",
        test_contract,
        1,
        rell.test.keypairs.alice.pub
    );

    val result = ownership.bridge.get_user_nfts(
        rell.test.keypairs.alice.pub, 
        first_page_cursor(150)
    );
    assert_equals(result.data, [
        (
            chain = "eth_main",
            contract = test_contract,
            id = 1
        ).to_gtv()
    ]);
}

//fetch nfts by owner 
function test_query_nfts_by_owner_empty() {
    val result = ownership.bridge.get_user_nfts(
        rell.test.keypairs.alice.pub, 
        first_page_cursor(150)
    );
    
    assert_true(empty(result.data));
}

function test_query_nfts_batch() {
    create_batch_ownerships(150);

    val page1 = ownership.bridge.get_user_nfts(
        rell.test.keypairs.alice.pub, 
        first_page_cursor(100)
    );    
    
    var expected_page_1 = range(100) @* {} (
        (
            chain = "eth_main",
            contract = test_contract,
            id = $
        ).to_gtv()
    );
    
    assert_equals(page1.data, expected_page_1);


    val page2 = ownership.bridge.get_user_nfts(
        rell.test.keypairs.alice.pub, page1.cursor.next!!
    );
    
    var expected_page_2 = range(99, 150) @* {} (
        (
            chain = "eth_main",
            contract = test_contract,
            id = $
        ).to_gtv()
    );
    
    assert_equals(page2.data, expected_page_2);
}

function test_before_transfer_ownership_extension_is_called() {
    create_ownership(
        "eth_main",
        test_contract,
        1,
        rell.test.keypairs.alice.pub
    );
    
    assert_true(extensions.ownership_transfer_extension_state.is_before_transfer_ownership_called);
}

function test_after_transfer_ownership_extension_is_called() {
    create_ownership(
        "eth_main",
        test_contract,
        1,
        rell.test.keypairs.alice.pub
    );
    
    assert_true(extensions.ownership_transfer_extension_state.is_before_transfer_ownership_called);
}
